"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Connect AITU
"""
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from sqlalchemy.exc import SQLAlchemyError
import time

from app.core.config import settings
from app.services.redis_service import redis_service
from app.api import (
    auth_router,
    majors_router,
    subjects_router,
    practice_router,
    exam_router,
    stats_router,
    admin_router,
)


# ===================================
# Lifecycle Events
# ===================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events (startup/shutdown)"""
    # Startup
    print("üöÄ Starting Connect AITU Backend...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await redis_service.connect()
    print("‚úÖ Redis connected")
    
    yield
    
    # Shutdown
    print("üõë Shutting down Connect AITU Backend...")
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis
    await redis_service.disconnect()
    print("‚úÖ Redis disconnected")


# ===================================
# Create FastAPI App
# ===================================

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan,
)


# ===================================
# CORS Middleware
# ===================================

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


# ===================================
# Request Time Middleware
# ===================================

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response


# ===================================
# Exception Handlers
# ===================================

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic"""
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "detail": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            "errors": exc.errors()
        }
    )


@app.exception_handler(SQLAlchemyError)
async def sqlalchemy_exception_handler(request: Request, exc: SQLAlchemyError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "detail": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "error": str(exc) if settings.DEBUG else "Internal server error"
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "error": str(exc) if settings.DEBUG else "Internal server error"
        }
    )


# ===================================
# Health Check
# ===================================

@app.get(
    "/health",
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ"],
    summary="Health check",
    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"
)
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤–µ—Ä—Å–∏—é
    """
    return {
        "status": "healthy",
        "app_name": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT
    }


@app.get(
    "/",
    tags=["–°–∏—Å—Ç–µ–º–Ω—ã–µ"],
    summary="–ö–æ—Ä–Ω–µ–≤–æ–π endpoint",
    description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"
)
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
    """
    return {
        "message": f"Welcome to {settings.APP_NAME} API",
        "version": settings.APP_VERSION,
        "docs": "/docs",
        "health": "/health"
    }


# ===================================
# API Routers
# ===================================

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥ /api prefix
API_PREFIX = "/api"

app.include_router(auth_router, prefix=API_PREFIX)
app.include_router(majors_router, prefix=API_PREFIX)
app.include_router(subjects_router, prefix=API_PREFIX)
app.include_router(practice_router, prefix=API_PREFIX)
app.include_router(exam_router, prefix=API_PREFIX)
app.include_router(stats_router, prefix=API_PREFIX)
app.include_router(admin_router, prefix=API_PREFIX)


# ===================================
# Startup Message
# ===================================

if __name__ == "__main__":
    import uvicorn
    
    print(f"""
    üéì {settings.APP_NAME} v{settings.APP_VERSION}
    
    Environment: {settings.ENVIRONMENT}
    Debug: {settings.DEBUG}
    
    API Documentation: http://localhost:8000/docs
    Health Check: http://localhost:8000/health
    """)
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level="info"
    )
