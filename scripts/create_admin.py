#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select
from app.db.session import async_session_maker
from app.models.user import User, UserRole
from app.core.security import get_password_hash


async def create_admin():
    """–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    print("=" * 60)
    print("üîê –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–í–û–ì–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    username = input("\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (admin): ").strip() or "admin"
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (admin123): ").strip() or "admin123"
    full_name = input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û (Admin User): ").strip() or "Admin User"
    
    print("\n" + "=" * 60)
    print(f"–õ–æ–≥–∏–Ω: {username}")
    print(f"–§–ò–û: {full_name}")
    print(f"–†–æ–ª—å: admin")
    print("=" * 60)
    
    confirm = input("\n–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? (yes/no): ").strip().lower()
    
    if confirm not in ["yes", "y", "–¥–∞"]:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    async with async_session_maker() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            result = await db.execute(
                select(User).where(User.username == username)
            )
            existing = result.scalar_one_or_none()
            
            if existing:
                print(f"\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
                update = input("–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å? (yes/no): ").strip().lower()
                if update in ["yes", "y", "–¥–∞"]:
                    existing.password_hash = get_password_hash(password)
                    existing.role = "admin"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
                    existing.full_name = full_name
                    existing.is_active = True
                    await db.commit()
                    print(f"‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
            admin = User(
                username=username,
                password_hash=get_password_hash(password),
                full_name=full_name,
                role="admin",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ UserRole.ADMIN
                is_active=True
            )
            
            db.add(admin)
            await db.commit()
            await db.refresh(admin)
            
            print(f"\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"   ID: {admin.id}")
            print(f"   –õ–æ–≥–∏–Ω: {admin.username}")
            print(f"   –§–ò–û: {admin.full_name}")
            print(f"   –†–æ–ª—å: {admin.role}")
            print("\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
        
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            await db.rollback()
            raise


if __name__ == "__main__":
    print("\n" + "üéì Connect AITU - –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞".center(60))
    asyncio.run(create_admin())