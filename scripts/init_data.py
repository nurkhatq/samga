#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ sorted_pairs.json
"""
import asyncio
import sys
import json
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select, func
from app.db.session import async_session_maker
from app.models.major import Major
from app.models.subject import Subject


async def init_majors():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ sorted_pairs.json"""
    async with async_session_maker() as db:
        result = await db.execute(select(func.count(Major.code)))
        if result.scalar() > 0:
            print(f"‚ö†Ô∏è  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º sorted_pairs.json
        json_path = Path(__file__).parent.parent / "data" / "sorted_pairs.json"
        if not json_path.exists():
            print(f"‚ùå –§–∞–π–ª {json_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ {len(data)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...")
        
        for code, info in data.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ø–æ –∫–æ–¥—É
            # M001-M021, M050-M079, M111-M153 - –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è
            # M080-M110 - –Ω–∞—É—á–Ω–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∞—è
            code_num = int(code[1:])
            if 80 <= code_num <= 110:
                mag_type = "scientific_pedagogical"
            else:
                mag_type = "profile"
            
            major = Major(
                code=code,
                title_kk=info["title"],
                title_ru=info.get("title_ru"),
                magistracy_type=mag_type,
                categories=info["categories"],
                is_active=True
            )
            db.add(major)
        
        await db.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")


async def init_common_subjects():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    async with async_session_maker() as db:
        result = await db.execute(
            select(func.count(Subject.code)).where(Subject.subject_type == "common")
        )
        if result.scalar() > 0:
            print(f"‚ö†Ô∏è  –û–±—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã")
            return
        
        print("üìñ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        subjects = [
            {
                "code": "TGO",
                "title_kk": "–¢–∞—Ä–∏—Ö, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, “õ“±“õ—ã“õ",
                "title_ru": "–ò—Å—Ç–æ—Ä–∏—è, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∞–≤–æ",
                "subject_type": "common",
                "major_code": None
            },
            {
                "code": "ENG",
                "title_kk": "–ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ",
                "title_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
                "subject_type": "common",
                "major_code": None
            },
        ]
        
        for s in subjects:
            subject = Subject(**s)
            db.add(subject)
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(subjects)} –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


async def init_profile_subjects():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ categories"""
    async with async_session_maker() as db:
        result = await db.execute(
            select(func.count(Subject.code)).where(Subject.subject_type == "profile")
        )
        if result.scalar() > 0:
            print(f"‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã")
            return
        
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        result = await db.execute(select(Major))
        majors = result.scalars().all()
        
        total = 0
        for major in majors:
            for i, category in enumerate(major.categories, 1):
                code = f"{major.code}_SUBJ{i}"
                
                subject = Subject(
                    code=code,
                    title_kk=category,
                    title_ru=category,
                    subject_type="profile",
                    major_code=major.code,
                    is_active=True
                )
                db.add(subject)
                total += 1
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total} –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


async def main():
    print("\n" + "=" * 60)
    print("üéì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60 + "\n")
    
    try:
        await init_majors()
        await init_common_subjects()
        await init_profile_subjects()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 60)
        print("\nüìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python scripts/create_admin.py\n")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())