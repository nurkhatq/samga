#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ questions.json –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

Usage:
    python scripts/import_questions.py [path_to_questions.json]
"""
import asyncio
import json
import sys
import uuid
from pathlib import Path
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select, func
from app.db.session import async_session_maker
from app.models.question import Question, QuestionDifficulty, QuestionType
from app.models.subject import Subject


async def import_questions_from_json(json_path: Path):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
    
    Args:
        json_path: –ü—É—Ç—å –∫ questions.json
    """
    print(f"\nüì• –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {json_path}...")
    
    # –ß–∏—Ç–∞–µ–º JSON
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not isinstance(data, dict) or "questions" not in data:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è: {\"questions\": [...]}")
        return
    
    questions_data: List[Dict] = data["questions"]
    total_questions = len(questions_data)
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ JSON")
    
    async with async_session_maker() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            result = await db.execute(select(func.count(Question.id)))
            existing_count = result.scalar() or 0
            
            if existing_count > 0:
                print(f"   ‚ÑπÔ∏è  –í –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {existing_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
                overwrite = input("   –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/N): ").strip().lower()
                
                if overwrite == 'y':
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
                    await db.execute("DELETE FROM questions")
                    await db.commit()
                    print("   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã")
                else:
                    print("   ‚è≠Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
            created_count = 0
            skipped_count = 0
            error_count = 0
            
            for i, q_data in enumerate(questions_data, 1):
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    required_fields = ["subject_code", "question_text", "options"]
                    
                    for field in required_fields:
                        if field not in q_data:
                            print(f"   ‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}', –ø—Ä–æ–ø—É—Å–∫")
                            skipped_count += 1
                            continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                    subject_code = q_data["subject_code"]
                    result = await db.execute(
                        select(Subject).where(Subject.code == subject_code)
                    )
                    subject = result.scalar_one_or_none()
                    
                    if not subject:
                        print(f"   ‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å {i}: –ø—Ä–µ–¥–º–µ—Ç '{subject_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫")
                        skipped_count += 1
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º difficulty
                    difficulty_str = q_data.get("difficulty", "medium")
                    try:
                        difficulty = QuestionDifficulty(difficulty_str)
                    except ValueError:
                        difficulty = QuestionDifficulty.MEDIUM
                    
                    # –ü–∞—Ä—Å–∏–º question_type
                    question_type_str = q_data.get("question_type", "single")
                    try:
                        question_type = QuestionType(question_type_str)
                    except ValueError:
                        question_type = QuestionType.SINGLE
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                    question = Question(
                        subject_code=subject_code,
                        question_text=q_data["question_text"],
                        options=q_data["options"],  # JSON –º–∞—Å—Å–∏–≤
                        difficulty=difficulty,
                        question_type=question_type,
                        points=q_data.get("points", 1),
                        time_seconds=q_data.get("time_seconds", 60),
                        explanation=q_data.get("explanation"),
                        tags=q_data.get("tags", [])
                    )
                    
                    db.add(question)
                    created_count += 1
                    
                    # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 100 –≤–æ–ø—Ä–æ—Å–æ–≤
                    if created_count % 100 == 0:
                        await db.commit()
                        print(f"   ‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {created_count}/{total_questions}...")
                
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤–æ–ø—Ä–æ—Å–∞ {i}: {e}")
                    error_count += 1
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
            await db.commit()
            
            print(f"\n   ‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"      - –°–æ–∑–¥–∞–Ω–æ: {created_count}")
            print(f"      - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
            print(f"      - –û—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await db.rollback()
            raise


async def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:")
    
    async with async_session_maker() as db:
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            result = await db.execute(select(func.count(Question.id)))
            total = result.scalar() or 0
            print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}")
            
            # –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            result = await db.execute(
                select(
                    Question.subject_code,
                    func.count(Question.id)
                ).group_by(Question.subject_code)
            )
            by_subject = result.all()
            
            if by_subject:
                print("\n   –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:")
                for subject_code, count in by_subject:
                    print(f"      {subject_code}: {count}")
            
            # –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            result = await db.execute(
                select(
                    Question.difficulty,
                    func.count(Question.id)
                ).group_by(Question.difficulty)
            )
            by_difficulty = result.all()
            
            if by_difficulty:
                print("\n   –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
                for difficulty, count in by_difficulty:
                    print(f"      {difficulty.value}: {count}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üìö –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ Connect AITU")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ JSON
    if len(sys.argv) > 1:
        json_path = Path(sys.argv[1])
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        json_path = Path(__file__).parent.parent / "questions.json"
    
    if not json_path.exists():
        print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python scripts/import_questions.py [path/to/questions.json]")
        print("\n–§–æ—Ä–º–∞—Ç questions.json:")
        print("""
{
  "questions": [
    {
      "subject_code": "TGO",
      "question_text": "–ö–∞–∫–æ–π –≥–æ–¥?",
      "options": [
        {"key": "A", "text": "2024", "is_correct": false},
        {"key": "B", "text": "2025", "is_correct": true}
      ],
      "difficulty": "easy",
      "question_type": "single",
      "points": 1,
      "time_seconds": 60,
      "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ...",
      "tags": ["–∏—Å—Ç–æ—Ä–∏—è", "–¥–∞—Ç—ã"]
    }
  ]
}
        """)
        sys.exit(1)
    
    try:
        await import_questions_from_json(json_path)
        await show_statistics()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("=" * 60 + "\n")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
