#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (153 —à—Ç—É–∫–∏)
- –ü—Ä–µ–¥–º–µ—Ç—ã (–¢–ì–û, –ê–ù–ì–õ, –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏)

Usage:
    python scripts/init_data.py
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select, func
from app.db.session import async_session_maker
from app.models.major import Major, MagistracyType
from app.models.subject import Subject, SubjectType


# –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 153)
MAJORS_DATA = [
    {
        "code": "M001",
        "title_kk": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∂”ô–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
        "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
        "magistracy_type": "profile",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
        "categories": ["–ë—ñ–ª—ñ–º –±–µ—Ä—É"]
    },
    {
        "code": "M002",
        "title_kk": "–ë–∞—Å—Ç–∞—É—ã—à –æ“õ—ã—Ç—É –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞—Å—ã –º–µ–Ω ”ô–¥—ñ—Å—Ç–µ–º–µ—Å—ñ",
        "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        "magistracy_type": "profile",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
        "categories": ["–ë—ñ–ª—ñ–º –±–µ—Ä—É"]
    },
    {
        "code": "M003",
        "title_kk": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "title_ru": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "magistracy_type": "scientific_pedagogical",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
        "categories": ["–ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É"]
    },
    {
        "code": "M004",
        "title_kk": "–§–∏–∑–∏–∫–∞",
        "title_ru": "–§–∏–∑–∏–∫–∞",
        "magistracy_type": "scientific_pedagogical",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
        "categories": ["–ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É"]
    },
    {
        "code": "M005",
        "title_kk": "–ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∂“Ø–π–µ–ª–µ—Ä",
        "title_ru": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "magistracy_type": "profile",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
        "categories": ["–¢–µ—Ö–Ω–∏–∫–∞"]
    },
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 148 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
]


# –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
PROFILE_SUBJECTS = {
    "M001": [
        {"code": "M001_PEDAGOGY", "title_kk": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞"},
        {"code": "M001_PSYCHOLOGY", "title_kk": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "title_ru": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"},
    ],
    "M002": [
        {"code": "M002_METHODS", "title_kk": "”ò–¥—ñ—Å—Ç–µ–º–µ", "title_ru": "–ú–µ—Ç–æ–¥–∏–∫–∞"},
        {"code": "M002_DIDACTICS", "title_kk": "–î–∏–¥–∞–∫—Ç–∏–∫–∞", "title_ru": "–î–∏–¥–∞–∫—Ç–∏–∫–∞"},
    ],
    "M003": [
        {"code": "M003_ALGEBRA", "title_kk": "–ê–ª–≥–µ–±—Ä–∞", "title_ru": "–ê–ª–≥–µ–±—Ä–∞"},
        {"code": "M003_GEOMETRY", "title_kk": "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "title_ru": "–ì–µ–æ–º–µ—Ç—Ä–∏—è"},
    ],
    "M004": [
        {"code": "M004_MECHANICS", "title_kk": "–ú–µ—Ö–∞–Ω–∏–∫–∞", "title_ru": "–ú–µ—Ö–∞–Ω–∏–∫–∞"},
        {"code": "M004_THERMODYNAMICS", "title_kk": "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞", "title_ru": "–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞"},
    ],
    "M005": [
        {"code": "M005_DATABASES", "title_kk": "–î–µ—Ä–µ–∫“õ–æ—Ä–ª–∞—Ä", "title_ru": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"},
        {"code": "M005_NETWORKS", "title_kk": "–ñ–µ–ª—ñ–ª–µ—Ä", "title_ru": "–°–µ—Ç–∏"},
    ],
}


async def init_majors():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π"""
    async with async_session_maker() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        result = await db.execute(select(func.count(Major.code)))
        count = result.scalar()
        
        if count > 0:
            print(f"‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        
        print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...")
        
        for major_data in MAJORS_DATA:
            major = Major(**major_data)
            db.add(major)
        
        await db.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(MAJORS_DATA)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")


async def init_common_subjects():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–¢–ì–û, –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫)"""
    async with async_session_maker() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        result = await db.execute(
            select(func.count(Subject.code)).where(Subject.subject_type == "common")
        )
        count = result.scalar()
        
        if count > 0:
            print(f"‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        
        print("üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        common_subjects = [
            {
                "code": "TGO",
                "title_kk": "–¢–∞—Ä–∏—Ö, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, “õ“±“õ—ã“õ",
                "title_ru": "–ò—Å—Ç–æ—Ä–∏—è, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∞–≤–æ",
                "subject_type": "common",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
                "major_code": None
            },
            {
                "code": "ENG",
                "title_kk": "–ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ",
                "title_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
                "subject_type": "common",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
                "major_code": None
            },
        ]
        
        for subject_data in common_subjects:
            subject = Subject(**subject_data)
            db.add(subject)
        
        await db.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(common_subjects)} –æ–±—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


async def init_profile_subjects():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    async with async_session_maker() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        result = await db.execute(
            select(func.count(Subject.code)).where(Subject.subject_type == "profile")
        )
        count = result.scalar()
        
        if count > 0:
            print(f"‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        
        print("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        total = 0
        for major_code, subjects in PROFILE_SUBJECTS.items():
            for subject_data in subjects:
                subject = Subject(
                    **subject_data,
                    subject_type="profile",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
                    major_code=major_code
                )
                db.add(subject)
                total += 1
        
        await db.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {total} –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üéì Connect AITU - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60 + "\n")
    
    try:
        await init_majors()
        await init_common_subjects()
        await init_profile_subjects()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        print("\nüìå –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã: python scripts/import_questions.py")
        print("2. –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: python scripts/create_admin.py")
        print("\n")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())