#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
from pathlib import Path
from datetime import datetime, timedelta
import random

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.db.session import async_session_maker
from app.models.user import User, UserRole
from app.models.major import Major, MagistracyType
from app.models.subject import Subject, SubjectType
from app.models.question import Question, QuestionDifficulty, QuestionType
from app.core.security import get_password_hash


async def generate_test_users(count: int = 10):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print(f"\nüë• –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    async with async_session_maker() as db:
        created = 0
        
        for i in range(1, count + 1):
            username = f"student{i}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            from sqlalchemy import select
            result = await db.execute(
                select(User).where(User.username == username)
            )
            if result.scalar_one_or_none():
                continue
            
            user = User(
                username=username,
                password_hash=get_password_hash("password123"),
                full_name=f"–°—Ç—É–¥–µ–Ω—Ç –¢–µ—Å—Ç–æ–≤—ã–π {i}",
                role=UserRole.STUDENT,
                major_code=f"M{str(i % 153 + 1).zfill(3)}",
                is_active=True
            )
            db.add(user)
            created += 1
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created}")


async def generate_test_majors(count: int = 10):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    print(f"\nüéì –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...")
    
    async with async_session_maker() as db:
        created = 0
        
        for i in range(1, count + 1):
            code = f"MTEST{str(i).zfill(3)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            from sqlalchemy import select
            result = await db.execute(
                select(Major).where(Major.code == code)
            )
            if result.scalar_one_or_none():
                continue
            
            major = Major(
                code=code,
                title_kk=f"–¢–µ—Å—Ç–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {i}",
                title_ru=f"–¢–µ—Å—Ç–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {i}",
                magistracy_type=random.choice([
                    MagistracyType.PROFILE,
                    MagistracyType.SCIENTIFIC_PEDAGOGICAL
                ]),
                categories=["test"],
                is_active=True
            )
            db.add(major)
            created += 1
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: {created}")


async def generate_test_subjects(major_code: str = "M001", count: int = 4):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    
    print(f"\nüìö –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {major_code}...")
    
    async with async_session_maker() as db:
        created = 0
        
        subjects = [
            ("TGO", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ “ì—ã–ª—ã–º —Ç–∞—Ä–∏—Ö—ã", SubjectType.COMMON),
            ("ENG", "English Test", SubjectType.COMMON),
            (f"{major_code}_TEST1", "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç 1", SubjectType.PROFILE),
            (f"{major_code}_TEST2", "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç 2", SubjectType.PROFILE),
        ]
        
        for code, title, subject_type in subjects[:count]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            from sqlalchemy import select
            result = await db.execute(
                select(Subject).where(Subject.code == code)
            )
            if result.scalar_one_or_none():
                continue
            
            subject = Subject(
                code=code,
                title_kk=title,
                title_ru=title,
                subject_type=subject_type,
                major_code=major_code if subject_type == SubjectType.PROFILE else None,
                is_active=True
            )
            db.add(subject)
            created += 1
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {created}")


async def generate_test_questions(subject_code: str = "TGO", count: int = 50):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    
    print(f"\n‚ùì –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è {subject_code}...")
    
    async with async_session_maker() as db:
        created = 0
        
        for i in range(1, count + 1):
            # –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
            question_type = random.choice([
                QuestionType.SINGLE,
                QuestionType.MULTIPLE
            ])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            options = [
                {
                    "key": "A",
                    "text": f"–í–∞—Ä–∏–∞–Ω—Ç –ê –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}",
                    "is_correct": question_type == QuestionType.SINGLE
                },
                {
                    "key": "B",
                    "text": f"–í–∞—Ä–∏–∞–Ω—Ç –ë –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}",
                    "is_correct": question_type == QuestionType.MULTIPLE
                },
                {
                    "key": "C",
                    "text": f"–í–∞—Ä–∏–∞–Ω—Ç –í –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}",
                    "is_correct": question_type == QuestionType.MULTIPLE
                },
                {
                    "key": "D",
                    "text": f"–í–∞—Ä–∏–∞–Ω—Ç –ì –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}",
                    "is_correct": False
                }
            ]
            
            question = Question(
                subject_code=subject_code,
                question_text=f"–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Ññ{i} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_code}?",
                options=options,
                difficulty=random.choice([
                    QuestionDifficulty.EASY,
                    QuestionDifficulty.MEDIUM,
                    QuestionDifficulty.HARD
                ]),
                question_type=question_type,
                points=1,
                time_seconds=60,
                explanation=f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}",
                tags=["test", f"question{i}"]
            )
            db.add(question)
            created += 1
        
        await db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {created}")


async def generate_all_test_data():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    print("=" * 60)
    print("üß™ –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        await generate_test_users(10)
        await generate_test_majors(5)
        await generate_test_subjects("M001", 4)
        await generate_test_questions("TGO", 50)
        await generate_test_questions("ENG", 50)
        
        print("\n" + "=" * 60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´!")
        print("=" * 60)
        
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("   ‚Ä¢ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (student1-10, password: password123)")
        print("   ‚Ä¢ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (MTEST001-005)")
        print("   ‚Ä¢ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞")
        print("   ‚Ä¢ 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


if __name__ == "__main__":
    print("\n" + "üéì Connect AITU - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö".center(60))
    asyncio.run(generate_all_test_data())
