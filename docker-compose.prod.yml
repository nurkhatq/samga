services:
  # ===================================
  # PostgreSQL Database
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: connect-aitu-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: connect_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: connect_aitu_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connect_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connect-aitu-network

  # ===================================
  # Redis
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: connect-aitu-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connect-aitu-network

  # ===================================
  # RabbitMQ Message Broker
  # ===================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: connect-aitu-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - connect-aitu-network

  # ===================================
  # FastAPI Backend
  # ===================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-backend
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@connect-aitu-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://connect-aitu-redis:6379/0
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@connect-aitu-rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://connect-aitu-redis:6379/1
    volumes:
      - ./app:/app/app:ro
      - ./scripts:/app/scripts:ro
      - ./alembic:/app/alembic:ro
      - ./alembic.ini:/app/alembic.ini:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connect-aitu-network

  # ===================================
  # Celery Worker
  # ===================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-celery-worker
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@connect-aitu-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://connect-aitu-redis:6379/0
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@connect-aitu-rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://connect-aitu-redis:6379/1
    volumes:
      - ./app:/app/app:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks.celery_app inspect ping -d celery@$$(hostname) | grep -q OK || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - connect-aitu-network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-celery-beat
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@connect-aitu-postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://connect-aitu-redis:6379/0
      - CELERY_BROKER_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@connect-aitu-rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://connect-aitu-redis:6379/1
    volumes:
      - ./app:/app/app:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -q '[c]elery beat' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - connect-aitu-network
  # ===================================
  # Nginx
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: connect-aitu-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - connect-aitu-network

  # ===================================
  # Certbot (Let's Encrypt SSL)
  # ===================================
  certbot:
    image: certbot/certbot:latest
    container_name: connect-aitu-certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    command: renew --quiet
    networks:
      - connect-aitu-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  nginx_logs:

networks:
  connect-aitu-network:
    driver: bridge