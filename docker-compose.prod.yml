version: '3.8'

services:
  # ===================================
  # PostgreSQL Database
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: connect-aitu-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-connect_aitu}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_DB: ${POSTGRES_DB:-connect_aitu_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-connect_aitu}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connect-aitu-network

  # ===================================
  # Redis
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: connect-aitu-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connect-aitu-network

  # ===================================
  # FastAPI Backend
  # ===================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-backend
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-connect_aitu}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-connect_aitu_db}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-change_me_in_production}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - CORS_ORIGINS=https://connect-aitu.me,https://www.connect-aitu.me
    volumes:
      - ./app:/app/app:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connect-aitu-network

  # ===================================
  # Celery Worker
  # ===================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-celery-worker
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-connect_aitu}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-connect_aitu_db}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-change_me_in_production}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./app:/app/app:ro
    depends_on:
      - postgres
      - redis
    networks:
      - connect-aitu-network

  # ===================================
  # Celery Beat
  # ===================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connect-aitu-celery-beat
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-connect_aitu}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-connect_aitu_db}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-change_me_in_production}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./app:/app/app:ro
    depends_on:
      - postgres
      - redis
    networks:
      - connect-aitu-network

  # ===================================
  # Nginx
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: connect-aitu-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - connect-aitu-network

volumes:
  postgres_data:
  redis_data:
  nginx_logs:

networks:
  connect-aitu-network:
    driver: bridge
