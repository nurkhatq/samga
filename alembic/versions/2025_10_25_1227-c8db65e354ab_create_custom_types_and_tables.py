"""Create custom types and tables

Revision ID: c8db65e354ab
Revises: 001_initial
Create Date: 2025-10-25 12:27:58.487477

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c8db65e354ab'
down_revision: Union[str, None] = '001_initial'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Сначала создаем пользовательские типы
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE magistracytype AS ENUM ('profile', 'scientific_pedagogical');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE subjecttype AS ENUM ('general', 'profile', 'foreign', 'tgo');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    # Добавляем новые колонки в exam_answers
    op.add_column('exam_answers', sa.Column('time_taken_seconds', sa.Integer(), nullable=True))
    op.add_column('exam_answers', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    
    # Изменяем типы timestamp колонок
    op.alter_column('exam_answers', 'answered_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('exam_answers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    
    # Создаем индекс
    op.create_index('idx_attempt_question', 'exam_answers', ['attempt_id', 'question_id'], unique=True)
    
    # Изменяем колонки в exam_attempts
    op.alter_column('exam_attempts', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('exam_attempts', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('exam_attempts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    
    # Управление индексами exam_attempts
    op.drop_index('ix_exam_attempts_started_at', table_name='exam_attempts')
    op.create_index('idx_user_created', 'exam_attempts', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_user_mode_status', 'exam_attempts', ['user_id', 'mode', 'status'], unique=False)
    op.create_index(op.f('ix_exam_attempts_id'), 'exam_attempts', ['id'], unique=False)
    op.create_index(op.f('ix_exam_attempts_major_code'), 'exam_attempts', ['major_code'], unique=False)
    op.create_index(op.f('ix_exam_attempts_subject_code'), 'exam_attempts', ['subject_code'], unique=False)
    
    # Изменения в majors
    op.alter_column('majors', 'title_ru',
               existing_type=sa.VARCHAR(length=500),
               nullable=True)
    
    # Изменяем тип magistracy_type с использованием USING для явного преобразования
    op.execute("""
        ALTER TABLE majors 
        ALTER COLUMN magistracy_type TYPE magistracytype 
        USING magistracy_type::text::magistracytype
    """)
    
    op.alter_column('majors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('majors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_majors_magistracy_type', table_name='majors')
    op.create_index(op.f('ix_majors_code'), 'majors', ['code'], unique=False)
    
    # Изменения в proctoring_events
    op.add_column('proctoring_events', sa.Column('product_metadata', sa.JSON(), nullable=False))
    op.alter_column('proctoring_events', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index('idx_attempt_event_type', 'proctoring_events', ['attempt_id', 'event_type'], unique=False)
    op.create_index('idx_attempt_timestamp', 'proctoring_events', ['attempt_id', 'timestamp'], unique=False)
    op.drop_column('proctoring_events', 'proctoring_metadata')
    op.drop_column('proctoring_events', 'created_at')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Откат изменений в proctoring_events
    op.add_column('proctoring_events', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('proctoring_events', sa.Column('proctoring_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index('idx_attempt_timestamp', table_name='proctoring_events')
    op.drop_index('idx_attempt_event_type', table_name='proctoring_events')
    op.alter_column('proctoring_events', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('proctoring_events', 'product_metadata')
    
    # Откат изменений в majors
    op.create_index('ix_majors_magistracy_type', 'majors', ['magistracy_type'], unique=False)
    op.drop_index(op.f('ix_majors_code'), table_name='majors')
    op.alter_column('majors', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('majors', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    
    # Откатываем тип magistracy_type обратно
    op.execute("""
        ALTER TABLE majors 
        ALTER COLUMN magistracy_type TYPE magistracy_type 
        USING magistracy_type::text::magistracy_type
    """)
    
    op.alter_column('majors', 'title_ru',
               existing_type=sa.VARCHAR(length=500),
               nullable=False)
    
    # Откат изменений в exam_attempts
    op.drop_index(op.f('ix_exam_attempts_subject_code'), table_name='exam_attempts')
    op.drop_index(op.f('ix_exam_attempts_major_code'), table_name='exam_attempts')
    op.drop_index(op.f('ix_exam_attempts_id'), table_name='exam_attempts')
    op.drop_index('idx_user_mode_status', table_name='exam_attempts')
    op.drop_index('idx_user_created', table_name='exam_attempts')
    op.create_index('ix_exam_attempts_started_at', 'exam_attempts', ['started_at'], unique=False)
    op.alter_column('exam_attempts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('exam_attempts', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    
    # Откат изменений в exam_answers
    op.drop_index('idx_attempt_question', table_name='exam_answers')
    op.alter_column('exam_answers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_answers', 'answered_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('exam_answers', 'updated_at')
    op.drop_column('exam_answers', 'time_taken_seconds')
    
    # Удаляем пользовательские типы
    op.execute("DROP TYPE IF EXISTS subjecttype CASCADE")
    op.execute("DROP TYPE IF EXISTS magistracytype CASCADE")
    
    # ### end Alembic commands ###