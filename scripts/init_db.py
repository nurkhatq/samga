#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import text
from app.db.session import async_engine
from app.db.base import Base
from app.models import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=" * 60)
    print("üóÑÔ∏è  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        async with async_engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        tables = [
            "users",
            "majors",
            "subjects",
            "questions",
            "exam_attempts",
            "exam_answers",
            "proctoring_events"
        ]
        
        for table in tables:
            print(f"   ‚úì {table}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("=" * 60)
        
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ: python scripts/import_data.py")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∞: python scripts/create_admin.py")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --reload")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def drop_all_tables():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–û–°–¢–û–†–û–ñ–ù–û!)"""
    
    print("\n" + "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! ‚ö†Ô∏è".center(60, "="))
    print("–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    print("=" * 60)
    
    confirm = input("\n–í–≤–µ–¥–∏—Ç–µ 'DELETE ALL' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
    
    if confirm != "DELETE ALL":
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise


async def reset_db():
    """–°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ)"""
    await drop_all_tables()
    await init_db()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "action",
        choices=["init", "drop", "reset"],
        help="–î–µ–π—Å—Ç–≤–∏–µ: init (—Å–æ–∑–¥–∞—Ç—å), drop (—É–¥–∞–ª–∏—Ç—å), reset (–ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å)"
    )
    
    args = parser.parse_args()
    
    print("\n" + "üéì Connect AITU - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î".center(60))
    
    if args.action == "init":
        asyncio.run(init_db())
    elif args.action == "drop":
        asyncio.run(drop_all_tables())
    elif args.action == "reset":
        asyncio.run(reset_db())
