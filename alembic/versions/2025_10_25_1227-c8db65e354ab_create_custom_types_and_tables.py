"""Create custom types and tables

Revision ID: c8db65e354ab
Revises: 001_initial
Create Date: 2025-10-25 12:27:58.487477

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c8db65e354ab'
down_revision: Union[str, None] = '001_initial'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('exam_answers', sa.Column('time_taken_seconds', sa.Integer(), nullable=True))
    op.add_column('exam_answers', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('exam_answers', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('exam_answers', 'answered_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('exam_answers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('idx_attempt_question', 'exam_answers', ['attempt_id', 'question_id'], unique=True)
    op.create_index(op.f('ix_exam_answers_id'), 'exam_answers', ['id'], unique=False)
    op.alter_column('exam_attempts', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('exam_attempts', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('exam_attempts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_exam_attempts_started_at', table_name='exam_attempts')
    op.create_index('idx_user_created', 'exam_attempts', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_user_mode_status', 'exam_attempts', ['user_id', 'mode', 'status'], unique=False)
    op.create_index(op.f('ix_exam_attempts_id'), 'exam_attempts', ['id'], unique=False)
    op.create_index(op.f('ix_exam_attempts_major_code'), 'exam_attempts', ['major_code'], unique=False)
    op.create_index(op.f('ix_exam_attempts_subject_code'), 'exam_attempts', ['subject_code'], unique=False)
    op.alter_column('majors', 'title_ru',
               existing_type=sa.VARCHAR(length=500),
               nullable=True)
    op.alter_column('majors', 'magistracy_type',
               existing_type=postgresql.ENUM('profile', 'scientific_pedagogical', name='magistracy_type'),
               type_=sa.Enum('profile', 'scientific_pedagogical', name='magistracytype'),
               existing_nullable=False)
    op.alter_column('majors', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('majors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_majors_magistracy_type', table_name='majors')
    op.create_index(op.f('ix_majors_code'), 'majors', ['code'], unique=False)
    op.add_column('proctoring_events', sa.Column('product_metadata', sa.JSON(), nullable=False))
    op.alter_column('proctoring_events', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('proctoring_events', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index('idx_attempt_event_type', 'proctoring_events', ['attempt_id', 'event_type'], unique=False)
    op.create_index('idx_attempt_timestamp', 'proctoring_events', ['attempt_id', 'timestamp'], unique=False)
    op.create_index(op.f('ix_proctoring_events_id'), 'proctoring_events', ['id'], unique=False)
    op.drop_column('proctoring_events', 'proctoring_metadata')
    op.drop_column('proctoring_events', 'created_at')
    op.add_column('questions', sa.Column('question_metadata', sa.JSON(), nullable=False))
    op.alter_column('questions', 'options',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('questions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_questions_question_type', table_name='questions')
    op.create_index(op.f('ix_questions_id'), 'questions', ['id'], unique=False)
    op.alter_column('subjects', 'title_kk',
               existing_type=sa.VARCHAR(length=300),
               type_=sa.String(length=500),
               existing_nullable=False)
    op.alter_column('subjects', 'title_ru',
               existing_type=sa.VARCHAR(length=300),
               type_=sa.String(length=500),
               nullable=True)
    op.alter_column('subjects', 'subject_type',
               existing_type=postgresql.ENUM('common', 'profile', name='subject_type'),
               type_=sa.Enum('common', 'profile', name='subjecttype'),
               existing_nullable=False)
    op.alter_column('subjects', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('subjects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_subjects_code'), 'subjects', ['code'], unique=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('student', 'admin', 'moderator', name='user_role'),
               type_=sa.Enum('student', 'admin', 'moderator', name='userrole'),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.drop_index('ix_users_username', table_name='users')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_major_code'), 'users', ['major_code'], unique=False)
    op.create_foreign_key(None, 'users', 'majors', ['major_code'], ['code'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_major_code'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('student', 'admin', 'moderator', name='userrole'),
               type_=postgresql.ENUM('student', 'admin', 'moderator', name='user_role'),
               existing_nullable=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
    op.drop_index(op.f('ix_subjects_code'), table_name='subjects')
    op.alter_column('subjects', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('subjects', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('subjects', 'subject_type',
               existing_type=sa.Enum('common', 'profile', name='subjecttype'),
               type_=postgresql.ENUM('common', 'profile', name='subject_type'),
               existing_nullable=False)
    op.alter_column('subjects', 'title_ru',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=300),
               nullable=False)
    op.alter_column('subjects', 'title_kk',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=300),
               existing_nullable=False)
    op.drop_index(op.f('ix_questions_id'), table_name='questions')
    op.create_index('ix_questions_question_type', 'questions', ['question_type'], unique=False)
    op.alter_column('questions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('questions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('questions', 'options',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('questions', 'question_metadata')
    op.add_column('proctoring_events', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('proctoring_events', sa.Column('proctoring_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_proctoring_events_id'), table_name='proctoring_events')
    op.drop_index('idx_attempt_timestamp', table_name='proctoring_events')
    op.drop_index('idx_attempt_event_type', table_name='proctoring_events')
    op.alter_column('proctoring_events', 'timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('proctoring_events', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('proctoring_events', 'product_metadata')
    op.drop_index(op.f('ix_majors_code'), table_name='majors')
    op.create_index('ix_majors_magistracy_type', 'majors', ['magistracy_type'], unique=False)
    op.alter_column('majors', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('majors', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('majors', 'magistracy_type',
               existing_type=sa.Enum('profile', 'scientific_pedagogical', name='magistracytype'),
               type_=postgresql.ENUM('profile', 'scientific_pedagogical', name='magistracy_type'),
               existing_nullable=False)
    op.alter_column('majors', 'title_ru',
               existing_type=sa.VARCHAR(length=500),
               nullable=False)
    op.drop_index(op.f('ix_exam_attempts_subject_code'), table_name='exam_attempts')
    op.drop_index(op.f('ix_exam_attempts_major_code'), table_name='exam_attempts')
    op.drop_index(op.f('ix_exam_attempts_id'), table_name='exam_attempts')
    op.drop_index('idx_user_mode_status', table_name='exam_attempts')
    op.drop_index('idx_user_created', table_name='exam_attempts')
    op.create_index('ix_exam_attempts_started_at', 'exam_attempts', ['started_at'], unique=False)
    op.alter_column('exam_attempts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_attempts', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('exam_attempts', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_index(op.f('ix_exam_answers_id'), table_name='exam_answers')
    op.drop_index('idx_attempt_question', table_name='exam_answers')
    op.alter_column('exam_answers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exam_answers', 'answered_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('exam_answers', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('exam_answers', 'updated_at')
    op.drop_column('exam_answers', 'time_taken_seconds')
    # ### end Alembic commands ###
