# nginx/conf.d/connect-aitu.conf

# Rate limiting zone (должна быть в http блоке, но мы разместим здесь как include)
# Эта директива будет работать, так как она включена через conf.d

# Upstream
upstream backend {
    server connect-aitu-backend:8000;
}

# ===================================
# HTTP -> HTTPS redirect
# ===================================
server {
    listen 80;
    listen [::]:80;
    server_name connect-aitu.me www.connect-aitu.me;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ===================================
# HTTPS server
# ===================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name connect-aitu.me www.connect-aitu.me;

    # SSL Certificates (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/connect-aitu.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/connect-aitu.me/privkey.pem;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/connect-aitu.me/chain.pem;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # API Backend
    location /api/ {
        proxy_pass http://backend:8000/api/;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Rate limiting
        limit_req zone=api_limit burst=100 nodelay;
        
        # WebSocket support (если понадобится)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Docs (Swagger UI)
    location /docs {
        proxy_pass http://backend:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /openapi.json {
        proxy_pass http://backend:8000/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Health check
    location /health {
        proxy_pass http://backend:8000/health;
        access_log off;
    }

    # Frontend (когда будет готов, сейчас просто заглушка)
    location / {
        return 200 'Connect AITU API is running. Visit /docs for documentation.';
        add_header Content-Type text/plain;
    }
}