#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (153 —à—Ç—É–∫–∏)
- –ü—Ä–µ–¥–º–µ—Ç—ã (–¢–ì–û, –ê–ù–ì–õ, –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏)

Usage:
    python scripts/init_data.py
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select, func
from app.db.session import async_session_maker
from app.models.major import Major, MagistracyType
from app.models.subject import Subject, SubjectType


# –ü—Ä–∏–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 153)
MAJORS_DATA = [
    {
        "code": "M001",
        "title_kk": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∂”ô–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
        "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
        "magistracy_type": MagistracyType.PROFILE,
        "categories": ["–ë—ñ–ª—ñ–º –±–µ—Ä—É"]
    },
    {
        "code": "M002",
        "title_kk": "–ë–∞—Å—Ç–∞—É—ã—à –æ“õ—ã—Ç—É –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞—Å—ã –º–µ–Ω ”ô–¥—ñ—Å—Ç–µ–º–µ—Å—ñ",
        "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
        "magistracy_type": MagistracyType.PROFILE,
        "categories": ["–ë—ñ–ª—ñ–º –±–µ—Ä—É"]
    },
    {
        "code": "M003",
        "title_kk": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "title_ru": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "magistracy_type": MagistracyType.SCIENTIFIC,
        "categories": ["–ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É"]
    },
    {
        "code": "M004",
        "title_kk": "–§–∏–∑–∏–∫–∞",
        "title_ru": "–§–∏–∑–∏–∫–∞",
        "magistracy_type": MagistracyType.SCIENTIFIC,
        "categories": ["–ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É"]
    },
    {
        "code": "M005",
        "title_kk": "–ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∂“Ø–π–µ–ª–µ—Ä",
        "title_ru": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "magistracy_type": MagistracyType.PROFILE,
        "categories": ["–¢–µ—Ö–Ω–∏–∫–∞"]
    },
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 148 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
]


# –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
PROFILE_SUBJECTS = {
    "M001": [
        {"code": "M001_PEDAGOGY", "title_kk": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞", "title_ru": "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞"},
        {"code": "M001_PSYCHOLOGY", "title_kk": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "title_ru": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"},
    ],
    "M002": [
        {"code": "M002_METHODS", "title_kk": "”ò–¥—ñ—Å—Ç–µ–º–µ", "title_ru": "–ú–µ—Ç–æ–¥–∏–∫–∞"},
        {"code": "M002_DIDACTICS", "title_kk": "–î–∏–¥–∞–∫—Ç–∏–∫–∞", "title_ru": "–î–∏–¥–∞–∫—Ç–∏–∫–∞"},
    ],
    "M003": [
        {"code": "M003_ALGEBRA", "title_kk": "–ê–ª–≥–µ–±—Ä–∞", "title_ru": "–ê–ª–≥–µ–±—Ä–∞"},
        {"code": "M003_ANALYSIS", "title_kk": "–ê–Ω–∞–ª–∏–∑", "title_ru": "–ê–Ω–∞–ª–∏–∑"},
    ],
    "M004": [
        {"code": "M004_MECHANICS", "title_kk": "–ú–µ—Ö–∞–Ω–∏–∫–∞", "title_ru": "–ú–µ—Ö–∞–Ω–∏–∫–∞"},
        {"code": "M004_QUANTUM", "title_kk": "–ö–≤–∞–Ω—Ç—Ç—ã“õ —Ñ–∏–∑–∏–∫–∞", "title_ru": "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞"},
    ],
    "M005": [
        {"code": "M005_DATABASES", "title_kk": "–î–µ—Ä–µ–∫“õ–æ—Ä–ª–∞—Ä", "title_ru": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"},
        {"code": "M005_NETWORKS", "title_kk": "–ñ–µ–ª—ñ–ª–µ—Ä", "title_ru": "–°–µ—Ç–∏"},
    ],
}


async def init_majors():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...")
    
    async with async_session_maker() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            result = await db.execute(select(func.count(Major.code)))
            existing_count = result.scalar() or 0
            
            if existing_count > 0:
                print(f"   ‚ÑπÔ∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {existing_count} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
                overwrite = input("   –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
                
                if overwrite != 'y':
                    print("   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
                    return
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            created_count = 0
            
            for major_data in MAJORS_DATA:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                result = await db.execute(
                    select(Major).where(Major.code == major_data["code"])
                )
                existing = result.scalar_one_or_none()
                
                if existing:
                    print(f"   ‚è≠Ô∏è  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {major_data['code']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                major = Major(**major_data)
                db.add(major)
                created_count += 1
            
            await db.commit()
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            await db.rollback()
            raise


async def init_subjects():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"""
    print("\nüìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    
    async with async_session_maker() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            result = await db.execute(select(func.count(Subject.code)))
            existing_count = result.scalar() or 0
            
            if existing_count > 0:
                print(f"   ‚ÑπÔ∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {existing_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                overwrite = input("   –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
                
                if overwrite != 'y':
                    print("   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    return
            
            created_count = 0
            
            # 1. –û–±—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–¢–ì–û, –ê–ù–ì–õ)
            common_subjects = [
                {
                    "code": "TGO",
                    "title_kk": "–¢–∞—Ä–∏—Ö, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –∂”ô–Ω–µ “õ–æ“ì–∞–º—Ç–∞–Ω—É",
                    "title_ru": "–ò—Å—Ç–æ—Ä–∏—è, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
                    "subject_type": SubjectType.COMMON,
                },
                {
                    "code": "ENG",
                    "title_kk": "–®–µ—Ç–µ–ª —Ç—ñ–ª—ñ (–∞“ì—ã–ª—à—ã–Ω)",
                    "title_ru": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)",
                    "subject_type": SubjectType.COMMON,
                },
            ]
            
            for subject_data in common_subjects:
                result = await db.execute(
                    select(Subject).where(Subject.code == subject_data["code"])
                )
                existing = result.scalar_one_or_none()
                
                if existing:
                    continue
                
                subject = Subject(**subject_data)
                db.add(subject)
                created_count += 1
            
            # 2. –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            for major_code, subjects_list in PROFILE_SUBJECTS.items():
                for subject_data in subjects_list:
                    result = await db.execute(
                        select(Subject).where(Subject.code == subject_data["code"])
                    )
                    existing = result.scalar_one_or_none()
                    
                    if existing:
                        continue
                    
                    subject = Subject(
                        code=subject_data["code"],
                        title_kk=subject_data["title_kk"],
                        title_ru=subject_data["title_ru"],
                        subject_type=SubjectType.PROFILE,
                        major_code=major_code
                    )
                    db.add(subject)
                    created_count += 1
            
            await db.commit()
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            await db.rollback()
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Connect AITU")
    print("=" * 60)
    
    try:
        await init_majors()
        await init_subjects()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 60)
        
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã: python scripts/import_questions.py")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∞: python scripts/create_admin.py")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python -m app.main\n")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
